/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List audit events
         * @description Returns paginated audit log entries. Requires the `view_audit_logs` permission.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number starting at 1. */
                    page?: number;
                    /** @description Number of items per page. */
                    limit?: number;
                    /** @description Filter by actor identifier. */
                    actorId?: string;
                    /** @description Filter by action name. */
                    action?: string;
                    /** @description Filter by target entity type. */
                    targetType?: string;
                    /** @description Include events from this date. */
                    dateFrom?: string;
                    /** @description Include events up to this date. */
                    dateTo?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated audit logs. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["AuditEvent"][];
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/audit/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get audit configuration
         * @description Returns the audit logging configuration. Requires the `read-audit-config` permission.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Audit configuration */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "levels": [
                         *         "info",
                         *         "warn"
                         *       ],
                         *       "categories": [
                         *         "auth",
                         *         "config"
                         *       ],
                         *       "updatedAt": "2024-01-01T00:00:00.000Z",
                         *       "updatedBy": "user1"
                         *     } */
                        "application/json": components["schemas"]["AuditConfig"];
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update audit configuration
         * @description Update the audit logging configuration. Requires the `write-audit-config` permission.
         *     Generates an audit event with action `auditConfig.updated`.
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description New audit logging settings. */
            requestBody: {
                content: {
                    /** @example {
                     *       "levels": [
                     *         "info"
                     *       ],
                     *       "categories": [
                     *         "auth"
                     *       ],
                     *       "updatedBy": "user1"
                     *     } */
                    "application/json": {
                        levels: string[];
                        categories: string[];
                        updatedBy: string;
                    };
                };
            };
            responses: {
                /** @description Updated configuration */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        /** @example {
                         *       "levels": [
                         *         "info"
                         *       ],
                         *       "categories": [
                         *         "auth"
                         *       ],
                         *       "updatedAt": "2024-01-01T00:00:00.000Z",
                         *       "updatedBy": "user1"
                         *     } */
                        "application/json": components["schemas"]["AuditConfig"];
                    };
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get configuration value
         * @description Return the value for the specified configuration key. Requires the `read-config` permission.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the configuration entry. */
                    key: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Configuration value */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConfigEntry"];
                    };
                };
                /** @description Configuration entry not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update configuration value
         * @description Update the value of a configuration entry. Requires the `update-config` permission.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description New value and user identifier performing the update. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description New value to store. */
                        value: unknown;
                        /** @description Identifier of the user updating the value. */
                        updatedBy: string;
                    };
                };
            };
            responses: {
                /** @description Configuration updated successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Delete configuration value
         * @description Remove a configuration entry. Requires the `delete-config` permission.
         *     Generates an audit event with action `config.deleted`.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the configuration entry. */
                    key: string;
                };
                cookie?: never;
            };
            /** @description Identifier of the user performing the deletion. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Identifier of the user deleting the value. */
                        deletedBy: string;
                    };
                };
            };
            responses: {
                /** @description Configuration deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/departments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all departments
         * @description Returns a paginated list of departments. Requires `read-departments` permission.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (starts at 1). */
                    page?: number;
                    /** @description Number of departments per page. */
                    limit?: number;
                    /** @description Filter by site identifier. */
                    siteId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated department list. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["Department"][];
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Create a department.
         * @description Creates a new department within a site. Authentication with
         *     administrator privileges is required. Requires `create-department` permission.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Department information to create. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Department"];
                };
            };
            responses: {
                /** @description Newly created department */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/departments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get department by ID
         * @description Returns detailed information about a specific department. Requires `read-department` permission.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique identifier of the department. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Department details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Department not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a department.
         * @description Modify a department's label, parent or manager. Requires `update-department` permission.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the department to update. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Updated department information. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Department"];
                };
            };
            responses: {
                /** @description Department after update */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Remove a department.
         * @description Permanently deletes a department. The operation fails if users are
         *     still attached. Requires administrator privileges. Requires `delete-department` permission.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the department to delete. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Department successfully deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Operation failed */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/departments/{id}/children": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List child departments
         * @description Retrieves a paginated list of departments that have the given department as parent. Requires `read-departments` permission.
         *
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    /** @description Filter children by site. */
                    siteId?: string;
                    /** @description Filter by label. */
                    search?: string;
                };
                header?: never;
                path: {
                    /** @description Identifier of the parent department. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated list of child departments. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["Department"][];
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/departments/{id}/manager": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get department manager
         * @description Returns the user managing the department. Requires `read-department` permission.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the department. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Manager information. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Manager not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Set department manager.
         * @description Assigns a user as the manager of the department. Requires
         *     administrator privileges. Requires `manage-department-users` permission.
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the department. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description User identifier to set as manager. */
            requestBody: {
                content: {
                    "application/json": {
                        userId: string;
                    };
                };
            };
            responses: {
                /** @description Department with manager assigned */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Department not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Remove department manager.
         * @description Clears the manager of the department. The caller must be authenticated
         *     as an administrator. Requires `manage-department-users` permission.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the department. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Department without manager */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Department not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/departments/{id}/parent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get parent department
         * @description Returns the parent department if any. Requires `read-department` permission.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the department. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Parent department information. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Parent department not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Set parent department.
         * @description Defines the parent department for hierarchical organization. Requires
         *     administrator privileges. Requires `manage-department-hierarchy` permission.
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the department to update. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Identifier of the new parent department. */
            requestBody: {
                content: {
                    "application/json": {
                        parentId: string;
                    };
                };
            };
            responses: {
                /** @description Department with updated parent */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Department not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Remove parent department.
         * @description Detaches the department from its current parent. Administrator
         *     authentication is required. Requires `manage-department-hierarchy` permission.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the department. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Department without parent */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Department not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/departments/{id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List department users
         * @description Returns a paginated list of users belonging to the department. Requires `read-users` permission.
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    /** @description Filter by user name or email. */
                    search?: string;
                    status?: "active" | "suspended" | "archived";
                    siteId?: string;
                    roleId?: string;
                };
                header?: never;
                path: {
                    /** @description Identifier of the department. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated users list. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["User"][];
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/departments/{id}/children/{childId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a child department.
         * @description Attaches an existing department as a child of another department.
         *     Requires authentication with administrative rights. Requires `manage-department-hierarchy` permission.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the parent department. */
                    id: string;
                    /** @description Identifier of the child department to attach. */
                    childId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Department with new child attached */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Child department not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Remove a child department.
         * @description Detaches a child department from its parent. Authentication and
         *     administrative privileges are required. Requires `manage-department-hierarchy` permission.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the parent department. */
                    id: string;
                    /** @description Identifier of the child department to detach. */
                    childId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Department without the removed child */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Child department not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/departments/{id}/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach user to department.
         * @description Adds an existing user to the specified department. Requires
         *     administrative privileges. Requires `manage-department-users` permission.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the target department. */
                    id: string;
                    /** @description Identifier of the user to attach. */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Department with user attached */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User or department not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Detach user from department.
         * @description Removes the association between a user and a department. Requires
         *     administrator authentication. Requires `manage-department-users` permission.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the department. */
                    id: string;
                    /** @description Identifier of the user to detach. */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Department after user removal */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Department"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all groups.
         * @description Returns all user groups. Requires `read-groups` permission.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (starts at 1). */
                    page?: number;
                    /** @description Number of groups per page. */
                    limit?: number;
                    /** @description Search term on the group name. */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated group list. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["UserGroup"][];
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Create a new user group.
         * @description Creates a new user group with the authenticated user as the responsible user. Requires `create-group` permission.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Data for the new user group. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Identifier for the group. */
                        id: string;
                        /** @description Group name. */
                        name: string;
                        /** @description Optional group description. */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description The created group. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserGroup"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user group by id.
         * @description Retrieves a single user group. Requires `read-group` permission.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group identifier. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The requested group. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserGroup"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Group not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a group.
         * @description Updates group information. Only the responsible user can modify it. Requires `update-group` permission.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group identifier. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Group data to update. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description New group name. */
                        name?: string;
                        /** @description New description. */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Updated group. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserGroup"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Group not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Delete a group.
         * @description Removes a group if the requester is responsible user. Requires `delete-group` permission.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group identifier. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Group deleted. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Group not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users of a group.
         * @description Returns the paginated members of the specified group. Requires `read-group` permission.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (starts at 1). */
                    page?: number;
                    /** @description Number of users per page. */
                    limit?: number;
                    /** @description Search term on the user name. */
                    search?: string;
                };
                header?: never;
                path: {
                    /** @description Group identifier. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated list of group members. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["User"][];
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Group not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Add user to group.
         * @description Adds a user to the group. Only the responsible user can manage members. Requires `manage-group-members` permission.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group identifier. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description User identifier to add. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Identifier of the user. */
                        userId: string;
                    };
                };
            };
            responses: {
                /** @description Updated group. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserGroup"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Group not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Remove user from group.
         * @description Removes a user from the group. Only the responsible user can manage members. Requires `manage-group-members` permission.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group identifier. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description User identifier to remove. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Identifier of the user. */
                        userId: string;
                    };
                };
            };
            responses: {
                /** @description Updated group. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserGroup"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Group not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{id}/responsibles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List responsible users of a group.
         * @description Returns the paginated list of responsible users managing the group. Requires `read-group` permission.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (starts at 1). */
                    page?: number;
                    /** @description Number of users per page. */
                    limit?: number;
                    /** @description Search term on the user name. */
                    search?: string;
                };
                header?: never;
                path: {
                    /** @description Group identifier. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated list of responsible users. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["User"][];
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Group not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Add responsible user to group.
         * @description Adds a user as responsible for the group. Only an existing responsible user can manage responsibles. Requires `manage-group-responsibles` permission.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group identifier. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description User identifier to add as responsible. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Identifier of the user. */
                        userId: string;
                    };
                };
            };
            responses: {
                /** @description Updated group. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserGroup"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Group not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Remove responsible user from group.
         * @description Removes a responsible user from the group. Only an existing responsible user can manage responsibles. Requires `manage-group-responsibles` permission.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Group identifier. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description User identifier to remove from responsible users. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Identifier of the user. */
                        userId: string;
                    };
                };
            };
            responses: {
                /** @description Updated group. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserGroup"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Group not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invitations/invite/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invitation information by token
         * @description Retrieves the invitation details linked to the provided token. Used to validate the invitation and pre-fill onboarding fields.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The invitation token from the activation link. */
                    token: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Invitation details and onboarding info. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Invitation"];
                    };
                };
                /** @description Invalid token parameter. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired invitation token. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invitations/invite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Invite a new user by email
         * @description Sends an invitation email with an activation link to a new user. Requires the `create-invitation` permission.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Email and optional details for the invited user. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Email address of the invitee. */
                        email: string;
                        /** @description First name (optional). */
                        firstName?: string;
                        /** @description Last name (optional). */
                        lastName?: string;
                        /** @description Role to assign after activation (optional). */
                        role?: string;
                    };
                };
            };
            responses: {
                /** @description Invitation sent successfully. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid request. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User already exists or invitation already sent. */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all permissions
         * @description Returns the list of all permissions. Requires the `read-permissions` permission.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (starts at 1). */
                    page?: number;
                    /** @description Number of permissions per page. */
                    limit?: number;
                    /** @description Search term on key or description. */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated permission list. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["Permission"][];
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Create a permission.
         * @description Registers a new permission in the system. Requires `create-permission` permission.
         *     Only authenticated administrators should use this endpoint.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Permission details to create. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Permission"];
                };
            };
            responses: {
                /** @description Newly created permission */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Permission"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/permissions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get permission by ID
         * @description Returns detailed information about a specific permission. Requires the `read-permission` permission.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique identifier of the permission. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Permission details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Permission"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Permission not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a permission.
         * @description Modify the key or description of an existing permission. Requires the `update-permission` permission.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the permission to update. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Updated permission information. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Permission"];
                };
            };
            responses: {
                /** @description Permission after update */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Permission"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Remove a permission.
         * @description Deletes an existing permission. Requires the `delete-permission` permission. It should no longer be referenced by any role before calling this endpoint.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the permission to delete. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Permission successfully removed */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Forbidden. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all roles
         * @description Returns a paginated list of roles. Requires the `read-roles` permission.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (starts at 1). */
                    page?: number;
                    /** @description Number of roles per page. */
                    limit?: number;
                    /** @description Search term on the role label. */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Array of role objects. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["Role"][];
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Create a role.
         * @description Registers a new role grouping a set of permissions. Requires
         *     authentication and administrative rights. Requires the `create-role` permission.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Role information to store. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            responses: {
                /** @description Newly created role */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get role by ID
         * @description Returns detailed information about a specific role. Requires the `read-role` permission.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique identifier of the role. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Role details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Role not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a role.
         * @description Modify the label or permissions of an existing role. Requires the `update-role` permission.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the role to update. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Updated role data. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Role"];
                };
            };
            responses: {
                /** @description Role after update */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Role"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Remove a role.
         * @description Deletes a role. The operation fails if users are still associated with
         *     it. Requires administrative privileges. Requires the `delete-role` permission.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the role to delete. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Role successfully deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Deletion failed because the role is still in use */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all sites
         * @description Returns the list of all sites. Requires the `read-sites` permission.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (starts at 1). */
                    page?: number;
                    /** @description Number of sites per page. */
                    limit?: number;
                    /** @description Search term on the site label. */
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated site list. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["Site"][];
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Create a site.
         * @description Adds a new physical site to the system. Requires the `manage-sites` permission.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Site information to create. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Site"];
                };
            };
            responses: {
                /** @description Newly created site */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Site"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sites/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get site by ID
         * @description Retrieve detailed information about a specific site. Requires the `read-site` permission.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique identifier of the site. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Site details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Site"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Site not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a site.
         * @description Modify the label of an existing site. Requires the `manage-sites` permission.
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the site to update. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description New site data. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Site"];
                };
            };
            responses: {
                /** @description Site after update */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Site"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Remove a site.
         * @description Deletes a site. The operation fails when users or departments are still
         *     attached to it. Requires the `manage-sites` permission.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the site to delete. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Site successfully deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Operation failed due to existing attachments */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users
         * @description Returns a paginated and filterable list of users. Requires the `read-users` permission.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Page number (starts at 1). */
                    page?: number;
                    /** @description Number of users per page. */
                    limit?: number;
                    /** @description Search term to filter users by name or email. */
                    search?: string;
                    /** @description Filter users by status. */
                    status?: "active" | "suspended" | "archived";
                    /** @description Filter by department identifier. */
                    departmentId?: string;
                    /** @description Filter by site identifier. */
                    siteId?: string;
                    /** @description Filter by role identifier. */
                    roleId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated user list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            items?: components["schemas"]["User"][];
                            page?: number;
                            limit?: number;
                            total?: number;
                        };
                    };
                };
                /** @description No content. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        /**
         * Register a new user.
         * @description Creates a user account for a new participant. This endpoint is open
         *     to unauthenticated clients and is typically used during onboarding.
         *     The returned `refreshToken` allows requesting a new access token.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Data describing the user to create including the account password. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["User"] & {
                        /** @description Must comply with configured password policy */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Newly created user profile with authentication tokens. */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            user?: components["schemas"]["User"];
                            token?: string;
                            refreshToken?: string;
                        };
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate a user with email and password.
         * @description Validates the provided credentials and returns the corresponding user
         *     profile if the login succeeds. The `refreshToken` can be used to
         *     obtain a new access token when the short lived one expires.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Email and password used to authenticate. */
            requestBody: {
                content: {
                    "application/json": {
                        email: string;
                        password: string;
                    };
                };
            };
            responses: {
                /** @description User successfully authenticated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            user?: components["schemas"]["User"];
                            token?: string;
                            refreshToken?: string;
                        };
                    };
                };
                /** @description Second factor authentication required */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            user?: components["schemas"]["User"];
                        };
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid credentials */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User account is suspended or archived */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mfa/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify multi-factor authentication code.
         * @description Completes authentication using the provided MFA code.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        userId: string;
                        code: string;
                    };
                };
            };
            responses: {
                /** @description MFA successfully verified. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            user?: components["schemas"]["User"];
                            token?: string;
                            refreshToken?: string;
                        };
                    };
                };
                /** @description Invalid verification code. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh an access token.
         * @description Exchanges a valid refresh token for a new access token.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Refresh token previously issued by the API. */
            requestBody: {
                content: {
                    "application/json": {
                        refreshToken: string;
                    };
                };
            };
            responses: {
                /** @description New authentication tokens. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            token?: string;
                            refreshToken?: string;
                        };
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired refresh token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Refresh token rotation attempted too soon */
                429: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revoke refresh token.
         * @description Invalidates the provided refresh token, logging the user out.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Refresh token to revoke. */
            requestBody: {
                content: {
                    "application/json": {
                        refreshToken: string;
                    };
                };
            };
            responses: {
                /** @description Logged out successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired refresh token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/provider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate a user with an external provider.
         * @description Exchanges a provider issued token (e.g. OAuth) for a local session and
         *     returns the associated user profile.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Provider name and issued token. */
            requestBody: {
                content: {
                    "application/json": {
                        provider: string;
                        token: string;
                    };
                };
            };
            responses: {
                /** @description User successfully authenticated with the provider */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid provider token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User account is suspended or archived */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/request-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request a password reset email.
         * @description Sends a password reset link to the provided email address.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Email address of the account requesting a reset. */
            requestBody: {
                content: {
                    "application/json": {
                        email: string;
                    };
                };
            };
            responses: {
                /** @description Reset request processed, no content returned */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset a user password.
         * @description Completes the password reset process using a valid reset token and the
         *     new password provided.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Reset token and the new password. */
            requestBody: {
                content: {
                    "application/json": {
                        token: string;
                        /** @description Must comply with configured password policy */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Password successfully changed */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mfa/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate a TOTP secret for the authenticated user.
         * @description Requires the `manage-mfa` permission.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Generated secret returned. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            secret?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mfa/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable multi-factor authentication for the authenticated user.
         * @description Requires the `manage-mfa` permission.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        type: string;
                        recoveryCodes?: string[];
                    };
                };
            };
            responses: {
                /** @description Updated user profile. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/mfa/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable multi-factor authentication for the authenticated user.
         * @description Requires the `manage-mfa` permission.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description MFA disabled. */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID
         * @description Returns detailed information about a specific user. Requires the `read-user` permission.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Unique identifier of the user. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User details. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Validation error. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Update a user profile.
         * @description Updates information about an existing user. Authentication is required
         *     and only authorized administrators should call this endpoint.
         *     Requires the `update-user` permission.
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the user to update. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Updated user information. */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            responses: {
                /** @description The user profile after update */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Remove a user.
         * @description Permanently deletes a user account. This operation cannot be undone
         *     and requires administrative privileges.
         *     Requires the `delete-user` permission.
         *
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the user to delete. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User successfully removed */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the current user profile.
         * @description Retrieves information about the authenticated user. A valid bearer
         *     token must be supplied in the `Authorization` header.
         *     Requires the `read-user` permission.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Profile of the authenticated user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change user status.
         * @description Updates the account status (active, suspended or archived) of a user.
         *     Requires administrator privileges.
         *     Requires the `update-user` permission.
         *
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the user to update. */
                    id: string;
                };
                cookie?: never;
            };
            /** @description The new status value. */
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "active" | "suspended" | "archived";
                    };
                };
            };
            responses: {
                /** @description User with the updated status */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description User lacks required permission. */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/picture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload user avatar
         * @description Uploads an avatar image for the specified user. Requires authentication.
         *     Requires the `update-user-picture` permission.
         *
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the user. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /** Format: binary */
                        file: string;
                    };
                };
            };
            responses: {
                /** @description Avatar updated */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /**
         * Remove user avatar
         * @description Deletes the avatar of the specified user if present. Requires the `update-user-picture` permission.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Identifier of the user. */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Avatar removed */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Validation error */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid or expired authentication token. */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Record of a significant action performed within the application. */
        AuditEvent: {
            /**
             * Format: date-time
             * @description Time when the action occurred.
             */
            timestamp?: string;
            /** @description Identifier of the actor responsible for the action. */
            actorId?: string | null;
            /**
             * @description Nature of the actor who triggered the event.
             * @enum {string}
             */
            actorType?: "user" | "system";
            /** @description Description of the performed action. */
            action?: string;
            /** @description Type of the affected entity when applicable. */
            targetType?: string | null;
            /** @description Identifier of the affected entity when applicable. */
            targetId?: string | null;
            /** @description Additional event information. */
            details?: Record<string, never> | null;
            /** @description IP address from which the action originated. */
            ipAddress?: string | null;
            /** @description User agent associated with the request. */
            userAgent?: string | null;
        };
        /** @description Settings controlling which audit events are recorded. */
        AuditConfig: {
            /** @description Enabled audit levels. */
            levels?: string[];
            /** @description Event categories to log. */
            categories?: string[];
            /**
             * Format: date-time
             * @description Time of last update.
             */
            updatedAt?: string | null;
            /** @description Identifier of the user who last modified the config. */
            updatedBy?: string | null;
        };
        /** @description Application configuration entry. */
        ConfigEntry: {
            /** @description Configuration key. */
            key: string;
            /** @description Stored configuration value. */
            value: string | number | boolean | Record<string, never>;
        };
        /** @description Physical location where users and departments operate. */
        Site: {
            /** @description Unique identifier of the site. */
            id: string;
            /** @description Human readable site name. */
            label: string;
        };
        /** @description Authorization item representing an allowed action. */
        Permission: {
            /** @description Unique identifier of the permission. */
            id: string;
            /** @description Machine readable key for the permission. */
            permissionKey: string;
            /** @description Human readable explanation of the permission. */
            description: string;
        };
        /** @description Organizational unit grouping users within a site. */
        Department: {
            /** @description Unique identifier of the department. */
            id: string;
            /** @description Department name. */
            label: string;
            /** @description Identifier of the parent department if applicable. */
            parentDepartmentId?: string | null;
            /** @description Identifier of the user managing this department. */
            managerUserId?: string | null;
            /** @description Site where the department is located. */
            site: components["schemas"]["Site"];
        };
        /** @description A group of users with a responsible user and members. */
        UserGroup: {
            /**
             * Format: uuid
             * @description Unique identifier for the group.
             */
            id: string;
            /** @description Group name. */
            name: string;
            /** @description Optional group description. */
            description?: string;
            /** @description The responsible users (group managers). */
            responsibleUsers: components["schemas"]["User"][];
            /** @description List of users in the group. */
            members: components["schemas"]["User"][];
        };
        /** @description Invitation record used during onboarding. */
        Invitation: {
            /** @description Email address of the invitee. */
            email: string;
            /** @description First name of the invitee. */
            firstName?: string | null;
            /** @description Last name of the invitee. */
            lastName?: string | null;
            /** @description Role assigned after activation. */
            role?: string | null;
        };
        /** @description Permission attached to a role with optional scope. */
        RolePermissionAssignment: {
            permission: components["schemas"]["Permission"];
            /** @description Context in which the permission applies. */
            scopeId?: string | null;
        };
        /** @description Collection of permissions that can be assigned to users. */
        Role: {
            /** @description Unique identifier of the role. */
            id: string;
            /** @description Human readable role name. */
            label: string;
            /** @description Permissions granted by the role. */
            permissions?: components["schemas"]["RolePermissionAssignment"][];
        };
        /** @description Permission granted or denied directly to a user. */
        UserPermissionAssignment: {
            permission: components["schemas"]["Permission"];
            /** @description Context in which the permission applies. */
            scopeId?: string | null;
            /** @description Whether the permission is denied instead of granted. */
            denyPermission?: boolean;
        };
        /** @description Application user with profile and access information. */
        User: {
            /** @description Unique identifier of the user. */
            id: string;
            /** @description Given name of the user. */
            firstName: string;
            /** @description Family name of the user. */
            lastName: string;
            /** @description Email address used for communication and login. */
            email: string;
            /** @description Roles assigned to the user. */
            roles?: components["schemas"]["Role"][];
            /**
             * @description Current account status.
             * @enum {string}
             */
            status?: "active" | "suspended" | "archived";
            /** @description Department the user belongs to. */
            department: components["schemas"]["Department"];
            /** @description Site where the user is located. */
            site: components["schemas"]["Site"];
            /** @description Optional URL of the profile picture. */
            picture?: string;
            /**
             * Format: date-time
             * @description Timestamp of the user's last successful login.
             */
            lastLogin?: string | null;
            /**
             * Format: date-time
             * @description Timestamp of the user's last activity (login or token refresh).
             */
            lastActivity?: string | null;
            /** @description Number of consecutive failed login attempts. */
            failedLoginAttempts?: number;
            /**
             * Format: date-time
             * @description Timestamp of the last failed login attempt.
             */
            lastFailedLoginAt?: string | null;
            /**
             * Format: date-time
             * @description Account lock expiration timestamp when locked.
             */
            lockedUntil?: string | null;
            /** @description Permissions granted directly to the user. */
            permissions?: components["schemas"]["UserPermissionAssignment"][];
        };
        /** @description Error information when a request fails. */
        ErrorResponse: {
            /** @description Human readable error message. */
            error: string;
            /** @description Machine readable error code. */
            code: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
