datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String                 @id @default(uuid())
  firstname           String
  lastname            String
  email               String                 @unique
  password            String?
  status              String
  picture             String?
  metadata            Json?
  emailVerified       Boolean?               @default(false)
  externalId          String?
  externalProvider    String?
  lastLogin           DateTime?
  lastActivity        DateTime?
  failedLoginAttempts Int                    @default(0)
  lastFailedLoginAt   DateTime?
  lockedUntil         DateTime?
  mfaEnabled          Boolean                @default(false)
  mfaType             String?
  mfaSecret           String?
  mfaRecoveryCodes    Json?
  passwordChangedAt   DateTime               @default(now())
  createdBy           User?                  @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdById         String?
  updatedBy           User?                  @relation("UserUpdatedBy", fields: [updatedById], references: [id])
  updatedById         String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  department          Department             @relation(fields: [departmentId], references: [id])
  departmentId        String
  site                Site                   @relation(fields: [siteId], references: [id])
  siteId              String
  roles               UserRole[]
  permissions         UserPermission[]
  managedDepartments  Department[]           @relation("DepartmentManager")
  groups              UserGroupMember[]
  responsibleGroups   UserGroupResponsible[]
  createdGroups       UserGroup[]            @relation("UserGroupCreatedBy")
  updatedGroups       UserGroup[]            @relation("UserGroupUpdatedBy")
  createdUsers        User[]                 @relation("UserCreatedBy")
  updatedUsers        User[]                 @relation("UserUpdatedBy")
  createdSites        Site[]                 @relation("SiteCreatedBy")
  updatedSites        Site[]                 @relation("SiteUpdatedBy")
  createdRoles        Role[]                 @relation("RoleCreatedBy")
  updatedRoles        Role[]                 @relation("RoleUpdatedBy")
  createdPermissions  Permission[]           @relation("PermissionCreatedBy")
  updatedPermissions  Permission[]           @relation("PermissionUpdatedBy")
  createdInvitations  Invitation[]           @relation("InvitationCreatedBy")
  updatedInvitations  Invitation[]           @relation("InvitationUpdatedBy")
  createdDepartments  Department[]           @relation("DepartmentCreatedBy")
  updatedDepartments  Department[]           @relation("DepartmentUpdatedBy")
  RefreshToken        RefreshToken[]
}

model Role {
  id          String           @id @default(uuid())
  label       String
  createdBy   User?            @relation("RoleCreatedBy", fields: [createdById], references: [id])
  createdById String?
  updatedBy   User?            @relation("RoleUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       UserRole[]
  permissions RolePermission[]
}

model Department {
  id                 String                 @id @default(uuid())
  label              String
  parentDepartmentId String?
  parent             Department?            @relation("DepartmentParent", fields: [parentDepartmentId], references: [id])
  children           Department[]           @relation("DepartmentParent")
  managerUserId      String?
  manager            User?                  @relation("DepartmentManager", fields: [managerUserId], references: [id])
  users              User[]
  permissions        DepartmentPermission[]
  site               Site                   @relation(fields: [siteId], references: [id])
  siteId             String
  createdBy          User?                  @relation("DepartmentCreatedBy", fields: [createdById], references: [id])
  createdById        String?
  updatedBy          User?                  @relation("DepartmentUpdatedBy", fields: [updatedById], references: [id])
  updatedById        String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
}

model UserRole {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@id([userId, roleId])
}

model Permission {
  id                    String                 @id @default(uuid())
  permissionKey         String                 @unique
  description           String
  createdBy             User?                  @relation("PermissionCreatedBy", fields: [createdById], references: [id])
  createdById           String?
  updatedBy             User?                  @relation("PermissionUpdatedBy", fields: [updatedById], references: [id])
  updatedById           String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  userPermissions       UserPermission[]
  rolePermissions       RolePermission[]
  departmentPermissions DepartmentPermission[]
}

model UserPermission {
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@id([userId, permissionId])
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@id([roleId, permissionId])
}

model DepartmentPermission {
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId String

  @@id([departmentId, permissionId])
}

model Site {
  id          String       @id @default(uuid())
  label       String
  users       User[]
  departments Department[]
  createdBy   User?        @relation("SiteCreatedBy", fields: [createdById], references: [id])
  createdById String?
  updatedBy   User?        @relation("SiteUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model UserGroup {
  id           String                 @id @default(uuid())
  name         String
  description  String?
  createdBy    User?                  @relation("UserGroupCreatedBy", fields: [createdById], references: [id])
  createdById  String?
  updatedBy    User?                  @relation("UserGroupUpdatedBy", fields: [updatedById], references: [id])
  updatedById  String?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  responsibles UserGroupResponsible[]
  members      UserGroupMember[]
}

model UserGroupMember {
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  group   UserGroup @relation(fields: [groupId], references: [id])
  groupId String

  @@id([userId, groupId])
}

model UserGroupResponsible {
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  group   UserGroup @relation(fields: [groupId], references: [id])
  groupId String

  @@id([userId, groupId])
}

model Invitation {
  id          String   @id @default(uuid())
  email       String
  token       String   @unique
  firstName   String?
  lastName    String?
  role        String?
  status      String
  expiresAt   DateTime
  createdBy   User?    @relation("InvitationCreatedBy", fields: [createdById], references: [id])
  createdById String?
  updatedBy   User?    @relation("InvitationUpdatedBy", fields: [updatedById], references: [id])
  updatedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RefreshToken {
  id         String    @id @default(uuid())
  userId     String
  tokenHash  String
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  revokedAt  DateTime?
  replacedBy String?
  usedAt     DateTime?
  ipAddress  String?
  userAgent  String?

  user User @relation(fields: [userId], references: [id])
}

model AuditLog {
  id         String   @id @default(uuid())
  timestamp  DateTime @default(now())
  actorId    String?
  actorType  String
  action     String
  targetType String?
  targetId   String?
  details    Json?
  ipAddress  String?
  userAgent  String?
}

model AppConfig {
  id        Int       @id @default(autoincrement())
  key       String    @unique
  value     String
  type      String
  updatedAt DateTime? @updatedAt
  updatedBy String?
}

model AuditConfig {
  id         Int       @id @default(autoincrement())
  levels     String[]
  categories String[]
  updatedAt  DateTime? @updatedAt
  updatedBy  String?
  singleton  Int       @unique @default(1)
}
